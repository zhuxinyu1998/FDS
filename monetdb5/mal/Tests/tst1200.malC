# Mil compiler Version 1.0)
# Copyright (c) 1993-2001, CWI. All rights reserved.

# Predefined code segment
#
##line 531 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
#module(monettime,alarm);
#
#
#
	month_bat:= bat.new(:str,10);
	bat.append(month_bat,"jan");
	bat.append(month_bat,"feb");
	bat.append(month_bat,"mar");
	bat.append(month_bat,"apr");
#month_bat.bat.append("jan");
	bat.append(month_bat,"may");
	bat.append(month_bat,"jun");
	bat.append(month_bat,"jul");
	bat.append(month_bat,"aug");
#month_bat.bat.append("may");
	bat.append(month_bat,"sep");
	bat.append(month_bat,"oct");
	bat.append(month_bat,"nov");
	bat.append(month_bat,"dec");
#
##line 614 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways to create dates
	date_00:= mtime.date(2000,01,01);
catch MALException:str;
	date_00 := nil:date;
exit MALException;
#var date_00 := date(2000,01,01);
	date_01:= mtime.date("5000-JAN-01");
catch MALException:str;
	date_01 := nil:date;
exit MALException;
#var date_01 := date("5000-JAN-01");
	date_02:= mtime.date("1968-FEBR-29");
catch MALException:str;
	date_02 := nil:date;
exit MALException;
#var date_02 := date("1968-FEBR-29");
	date_03:= mtime.date("1-MARCH-01");
catch MALException:str;
	date_03 := nil:date;
exit MALException;
#var date_03 := date("1-MARCH-01");
	date_04:= mtime.date("-5867411-JAN-1");
catch MALException:str;
	date_04 := nil:date;
exit MALException;
#var date_04 := date("-5867411-JAN-1");
	date_05:= mtime.date("-768/octobe/01");
catch MALException:str;
	date_05 := nil:date;
exit MALException;
#var date_05 := date("-768/octobe/01");
	date_06:= mtime.date("5000\\novembe\\01");
catch MALException:str;
	date_06 := nil:date;
exit MALException;
#var date_06 := date("5000\\novembe\\01");
	date_07:= mtime.date("-1999/jun/01");
catch MALException:str;
	date_07 := nil:date;
exit MALException;
#var date_07 := date("-1999/jun/01");
	date_08:= mtime.date("2000-jul-14");
catch MALException:str;
	date_08 := nil:date;
exit MALException;
#var date_08 := date("2000-jul-14");
	date_09:= mtime.date("1999-sept-01");
catch MALException:str;
	date_09 := nil:date;
exit MALException;
#var date_09 := date("1999-sept-01");
	date_10:= mtime.date("1998-decemBeR-01");
catch MALException:str;
	date_10 := nil:date;
exit MALException;
#var date_10 := date("1998-decemBeR-01");
	date_11:= mtime.date("1953 may                01");
catch MALException:str;
	date_11 := nil:date;
exit MALException;
#var date_11 := date("1953 may                01");
	date_12:= mtime.date("5867411-DEC-31");
catch MALException:str;
	date_12 := nil:date;
exit MALException;
#var date_12 := date("5867411-DEC-31");
## nil dates
	date_13:= mtime.date(1996,13,1);
catch MALException:str;
	date_13 := nil:date;
exit MALException;
#var date_13 := date(1996,13,1);
	date_14:= mtime.date("999999999999999999999-01-01");
catch MALException:str;
	date_14 := nil:date;
exit MALException;
#var date_14 := date("999999999999999999999-01-01");
	date_15:= mtime.date("1999-JANUARI-01");
catch MALException:str;
	date_15 := nil:date;
exit MALException;
#var date_15 := date("1999-JANUARI-01");
	date_16:= mtime.date("1999-FEBR-29");
catch MALException:str;
	date_16 := nil:date;
exit MALException;
#var date_16 := date("1999-FEBR-29");
	date_17:= mtime.date("-1-DECEMBER-0");
catch MALException:str;
	date_17 := nil:date;
exit MALException;
#var date_17 := date("-1-DECEMBER-0");
	date_18:= mtime.date("5000\novembe\31");
catch MALException:str;
	date_18 := nil:date;
exit MALException;
#var date_18 := date("5000\novembe\31");
	date_19:= mtime.date("nil");
catch MALException:str;
	date_19 := nil:date;
exit MALException;
#var date_19 := date("nil");
	date_20:= mtime.date("1999-sept-31");
catch MALException:str;
	date_20 := nil:date;
exit MALException;
#var date_20 := date("1999-sept-31");
#
	date_bat:= bat.new(:date);
	bat.append(date_bat,date_00);
	bat.append(date_bat,date_01);
	bat.append(date_bat,date_02);
	bat.append(date_bat,date_03);
	bat.append(date_bat,date_04);
	bat.append(date_bat,date_05);
	bat.append(date_bat,date_06);
	bat.append(date_bat,date_07);
	bat.append(date_bat,date_08);
	bat.append(date_bat,date_09);
	bat.append(date_bat,date_10);
	bat.append(date_bat,date_11);
	bat.append(date_bat,date_12);
	bat.append(date_bat,date_13);
	bat.append(date_bat,date_14);
	bat.append(date_bat,date_15);
	bat.append(date_bat,date_16);
	bat.append(date_bat,date_17);
	bat.append(date_bat,date_18);
	bat.append(date_bat,date_19);
	bat.append(date_bat,date_20);
#
## test the operations on dates
	ne_a := bat.setColumn(date_bat,"date");
#io.print(date_bat.bat.setColumn("date"),
	oe_a:bat[:int] := mal.multiplex("mtime","year",date_bat);
	pe_a := bat.setColumn(oe_a,"year");
#      [year](date_bat).bat.setColumn("year"),
	qe_a:bat[:int] := mal.multiplex("mtime","day",date_bat);
	re_a := bat.setColumn(qe_a,"day");
#      [day](date_bat).bat.setColumn("day"),
	se_a:bat[:int] := mal.multiplex("mtime","month",date_bat);
	te_a:bat[:str] := mal.multiplex("mtime","monthname",se_a);
	ue_a := bat.setColumn(te_a,"monthname");
#      [monthname]([month](date_bat)).bat.setColumn("monthname"),
	ve_a:bat[:int] := mal.multiplex("mtime","month",date_bat);
	we_a:bat[:str] := mal.multiplex("mtime","monthname",ve_a);
	xe_a:bat[:int] := mal.multiplex("mtime","monthnum",we_a);
	ye_a := bat.setColumn(xe_a,"monthnum");
	io.print("print(date_bat,oe_a,qe_a,te_a,xe_a)");
	af_a := io.print(date_bat,oe_a,qe_a,te_a,xe_a);
#      [monthnum]([monthname]([month](date_bat))).bat.setColumn("monthnum"));
#
	date_addyears:bat[:date]:= mal.multiplex("mtime","addyears",date_bat,-100);
#var date_addyears := [addyears](date_bat, -100);
	date_addmonths:bat[:date]:= mal.multiplex("mtime","addmonths",date_bat,1);
#var date_addmonths := [addmonths](date_bat, 1);
#
	bat.setColumn(date_bat,"date");
#io.print(date_bat.bat.setColumn("date"),
	bat.setColumn(date_addyears,"min100y");
#      date_addyears.bat.setColumn("min100y"),
	df_a:bat[:int] := mal.multiplex("mtime","diff",date_addyears,date_bat);
	bat.setColumn(df_a,"diff");
	io.print("print(date_bat,date_addyears,df_a)");
	ff_a := io.print(date_bat,date_addyears,df_a);
#      [diff](date_addyears, date_bat).bat.setColumn("diff"));
#
	bat.setColumn(date_bat,"date");
#io.print(date_bat.bat.setColumn("date"),
	bat.setColumn(date_addmonths,"plus1m");
#      date_addmonths.bat.setColumn("plus1m"),
	if_a:bat[:int] := mal.multiplex("mtime","diff",date_addmonths,date_bat);
	bat.setColumn(if_a,"diff");
	io.print(" print(date_bat,date_addmonths,if_a)");
	kf_a := io.print(date_bat,date_addmonths,if_a);
#      [diff](date_addmonths, date_bat).bat.setColumn("diff"));
#
## test dayofweek and weeknumber using more than two years as consecutive days
	date_seq:= bat.new(:date);
	date_nr:= bat.new(:int);
#var date_seq := bat.new(int, date);
	i:= -375;
#var i := -375;
barrier	lf_a:= true;
	i:= i+1;
	of_a := calc.<(i,375);
barrier	mf_a:= of_a;
#while ((i :+= 1) < 375) {
	pf_a := mtime.adddays(date_00,i);
	bat.append(date_seq,pf_a);
	bat.append(date_nr,i);
redo	lf_a;
exit	mf_a;
exit	lf_a;
#}
	rf_a := bat.setColumn(date_seq,"date");
#io.print(date_seq.bat.setColumn("date"),
	sf_a:bat[:int] := mal.multiplex("mtime","weekofyear",date_seq);
	tf_a := bat.setColumn(sf_a,"weekofyear");
#      [weekofyear](date_seq).bat.setColumn("weekofyear"),
	uf_a:bat[:int] := mal.multiplex("mtime","dayofweek",date_seq);
	vf_a:bat[:str] := mal.multiplex("mtime","dayname",uf_a);
	wf_a := bat.setColumn(vf_a,"dayofweek");
#      [dayname]([dayofweek](date_seq)).bat.setColumn("dayofweek"),
	xf_a:bat[:int] := mal.multiplex("mtime","dayofweek",date_seq);
	yf_a:bat[:str] := mal.multiplex("mtime","dayname",xf_a);
	ag_a:bat[:int] := mal.multiplex("mtime","daynum",yf_a);
	bg_a := bat.setColumn(ag_a,"num");
#      [daynum]([dayname]([dayofweek](date_seq))).bat.setColumn("num"),
	cg_a:bat[:int] := mal.multiplex("mtime","dayofyear",date_seq);
	dg_a := bat.setColumn(cg_a,"dayofyear");
io.print("date_seq,sf_a,vf_a,ag_a,cg_a");
	eg_a := io.print(date_nr, date_seq,sf_a,vf_a,ag_a,cg_a);
#      [dayofyear](date_seq).bat.setColumn("dayofyear"));
#
#
#
##line 679 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways top create daytimes
	daytime_00:= mtime.daytime(23,59,59,999);
#var daytime_00 := mtime.daytime(23,59,59,999);
	daytime_01:= mtime.daytime("23:59");
#var daytime_01 := mtime.daytime("23:59");
	daytime_02:= mtime.daytime("00:00");
#var daytime_02 := mtime.daytime("00:00");
	daytime_03:= mtime.daytime("23:59:59");
#var daytime_03 := mtime.daytime("23:59:59");
	daytime_04:= mtime.daytime("00:00:00.000");
#var daytime_04 := mtime.daytime("00:00:00.000");
	daytime_05:= mtime.daytime("00:00:00");
#var daytime_05 := mtime.daytime("00:00:00");
	daytime_06:= mtime.daytime("00:00:00:001");
#var daytime_06 := mtime.daytime("00:00:00:001");
	daytime_07:= mtime.daytime("03:49:02.999");
#var daytime_07 := mtime.daytime("03:49:02.999");
	daytime_08:= mtime.daytime("20:48:42:999");
#var daytime_08 := mtime.daytime("20:48:42:999");
	daytime_09:= mtime.daytime("17:53:38:999");
#var daytime_09 := mtime.daytime("17:53:38:999");
	daytime_10:= mtime.daytime("13:15:34:999");
#var daytime_10 := mtime.daytime("13:15:34:999");
	daytime_11:= mtime.daytime("07:34:27.999");
#var daytime_11 := mtime.daytime("07:34:27.999");
	daytime_12:= mtime.daytime("23:59:59:999");
#var daytime_12 := mtime.daytime("23:59:59:999");
	daytime_13:= mtime.daytime("01:00:03.999");
#var daytime_13 := mtime.daytime("01:00:03.999");
	daytime_14:= mtime.daytime("23:59:59.999");
#var daytime_14 := mtime.daytime("23:59:59.999");
## nil daytimes
	daytime_15:= mtime.daytime(24,59,59,999);
#var daytime_15 := mtime.daytime(24,59,59,999);
	daytime_16:= mtime.daytime(23,60,59,999);
#var daytime_16 := mtime.daytime(23,60,59,999);
	daytime_17:= mtime.daytime(23,59,60,999);
#var daytime_17 := mtime.daytime(23,59,60,999);
	daytime_18:= mtime.daytime(23,59,60,1000);
#var daytime_18 := mtime.daytime(23,59,60,1000);
	daytime_19:= mtime.daytime("nil");
#var daytime_19 := mtime.daytime("nil");
	daytime_20:= mtime.daytime("nil");
#
	daytime_bat:= bat.new(:daytime);
	bat.append(daytime_bat,daytime_00);
	bat.append(daytime_bat,daytime_01);
	bat.append(daytime_bat,daytime_02);
	bat.append(daytime_bat,daytime_03);
	bat.append(daytime_bat,daytime_04);
	bat.append(daytime_bat,daytime_05);
	bat.append(daytime_bat,daytime_06);
	bat.append(daytime_bat,daytime_07);
	bat.append(daytime_bat,daytime_08);
	bat.append(daytime_bat,daytime_09);
	bat.append(daytime_bat,daytime_10);
	bat.append(daytime_bat,daytime_11);
	bat.append(daytime_bat,daytime_12);
	bat.append(daytime_bat,daytime_13);
	bat.append(daytime_bat,daytime_14);
	bat.append(daytime_bat,daytime_15);
	bat.append(daytime_bat,daytime_16);
	bat.append(daytime_bat,daytime_17);
	bat.append(daytime_bat,daytime_18);
	bat.append(daytime_bat,daytime_19);
	bat.append(daytime_bat,daytime_20);
#
	bat.setColumn(daytime_bat,"daytime");
#io.print(daytime_bat.bat.setColumn("daytime"),
	bh_a:bat[:int] := mal.multiplex("mtime","hours",daytime_bat);
	bat.setColumn(bh_a,"hours");
#      [hours](daytime_bat).bat.setColumn("hours"),
	dh_a:bat[:int] := mal.multiplex("mtime","minutes",daytime_bat);
	bat.setColumn(dh_a,"minutes");
#      [minutes](daytime_bat).bat.setColumn("minutes"),
	fh_a:bat[:int] := mal.multiplex("mtime","seconds",daytime_bat);
	bat.setColumn(fh_a,"seconds");
#      [seconds](daytime_bat).bat.setColumn("seconds"),
	hh_a:bat[:int] := mal.multiplex("mtime","milliseconds",daytime_bat);
	bat.setColumn(hh_a,"milliseconds");
io.print("daytime_bat,bh_a,dh_a,fh_a,hh_a");
	jh_a := io.print(daytime_bat,bh_a,dh_a,fh_a,hh_a);
#      [milliseconds](daytime_bat).bat.setColumn("milliseconds"));
#
#
#
